/* tslint:disable */
/* eslint-disable */
/**
 * Marsinet
 * The marsinet API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { CreateDeviceDto } from '../models';
import { DeviceTable } from '../models';
import { Organization } from '../models';
import { UpdateActiveDeviceDto } from '../models';
import { UpdateDeviceDto } from '../models';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add a device to an organization
     * @param {string} serial Serial number
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerAddDeviceToOrganization: async (
      serial: string,
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'serial' is not null or undefined
      if (serial === null || serial === undefined) {
        throw new RequiredError(
          'serial',
          'Required parameter serial was null or undefined when calling devicesControllerAddDeviceToOrganization.'
        );
      }
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling devicesControllerAddDeviceToOrganization.'
        );
      }
      const localVarPath =
        `/devices/add-device-to-organization/{serial}/{organization_id}`
          .replace(`{${'serial'}}`, encodeURIComponent(String(serial)))
          .replace(
            `{${'organization_id'}}`,
            encodeURIComponent(String(organization_id))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new device
     * @param {CreateDeviceDto} body Device data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerCreate: async (
      body: CreateDeviceDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling devicesControllerCreate.'
        );
      }
      const localVarPath = `/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerFindAll: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve all organizations for a given device
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerFindAllOrganizations: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerFindAllOrganizations.'
        );
      }
      const localVarPath = `/devices/organizations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve a device by its ID
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerFindOne.'
        );
      }
      const localVarPath = `/devices/one/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a device by its ID and all relations with the organizations that it belongs
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerRemove.'
        );
      }
      const localVarPath = `/devices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a device from an organization
     * @param {string} device_id Device ID
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerRemoveDeviceFromOrganization: async (
      device_id: string,
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'device_id' is not null or undefined
      if (device_id === null || device_id === undefined) {
        throw new RequiredError(
          'device_id',
          'Required parameter device_id was null or undefined when calling devicesControllerRemoveDeviceFromOrganization.'
        );
      }
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling devicesControllerRemoveDeviceFromOrganization.'
        );
      }
      const localVarPath =
        `/devices/remove-device-from-organization/{device_id}/{organization_id}`
          .replace(`{${'device_id'}}`, encodeURIComponent(String(device_id)))
          .replace(
            `{${'organization_id'}}`,
            encodeURIComponent(String(organization_id))
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete all devices from an organization
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerRemoveDeviceFromOrganizations: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerRemoveDeviceFromOrganizations.'
        );
      }
      const localVarPath = `/devices/all/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the active status of a device
     * @param {UpdateActiveDeviceDto} body Device active status
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerUpdate: async (
      body: UpdateActiveDeviceDto,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling devicesControllerUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerUpdate.'
        );
      }
      const localVarPath = `/devices/{id}/active`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a device by its ID
     * @param {UpdateDeviceDto} body Device data
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    devicesControllerUpdateDevice: async (
      body: UpdateDeviceDto,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling devicesControllerUpdateDevice.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling devicesControllerUpdateDevice.'
        );
      }
      const localVarPath = `/devices/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a device to an organization
     * @param {string} serial Serial number
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerAddDeviceToOrganization(
      serial: string,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerAddDeviceToOrganization(
        serial,
        organization_id,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Create a new device
     * @param {CreateDeviceDto} body Device data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerCreate(
      body: CreateDeviceDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieve all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindAll(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<DeviceTable>>>
    > {
      const localVarAxiosArgs =
        await DevicesApiAxiosParamCreator(
          configuration
        ).devicesControllerFindAll(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieve all organizations for a given device
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindAllOrganizations(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<Organization>>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerFindAllOrganizations(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieve a device by its ID
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerFindOne(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete a device by its ID and all relations with the organizations that it belongs
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerRemove(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Remove a device from an organization
     * @param {string} device_id Device ID
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemoveDeviceFromOrganization(
      device_id: string,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerRemoveDeviceFromOrganization(
        device_id,
        organization_id,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete all devices from an organization
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemoveDeviceFromOrganizations(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<DeviceTable>>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerRemoveDeviceFromOrganizations(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update the active status of a device
     * @param {UpdateActiveDeviceDto} body Device active status
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerUpdate(
      body: UpdateActiveDeviceDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update a device by its ID
     * @param {UpdateDeviceDto} body Device data
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerUpdateDevice(
      body: UpdateDeviceDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<DeviceTable>>
    > {
      const localVarAxiosArgs = await DevicesApiAxiosParamCreator(
        configuration
      ).devicesControllerUpdateDevice(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Add a device to an organization
     * @param {string} serial Serial number
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerAddDeviceToOrganization(
      serial: string,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return DevicesApiFp(configuration)
        .devicesControllerAddDeviceToOrganization(
          serial,
          organization_id,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new device
     * @param {CreateDeviceDto} body Device data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerCreate(
      body: CreateDeviceDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve all devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindAll(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<DeviceTable>>> {
      return DevicesApiFp(configuration)
        .devicesControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve all organizations for a given device
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindAllOrganizations(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<Organization>>> {
      return DevicesApiFp(configuration)
        .devicesControllerFindAllOrganizations(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve a device by its ID
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a device by its ID and all relations with the organizations that it belongs
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a device from an organization
     * @param {string} device_id Device ID
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemoveDeviceFromOrganization(
      device_id: string,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerRemoveDeviceFromOrganization(
          device_id,
          organization_id,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete all devices from an organization
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerRemoveDeviceFromOrganizations(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<DeviceTable>>> {
      return DevicesApiFp(configuration)
        .devicesControllerRemoveDeviceFromOrganizations(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the active status of a device
     * @param {UpdateActiveDeviceDto} body Device active status
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerUpdate(
      body: UpdateActiveDeviceDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a device by its ID
     * @param {UpdateDeviceDto} body Device data
     * @param {string} id Unique device identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async devicesControllerUpdateDevice(
      body: UpdateDeviceDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<DeviceTable>> {
      return DevicesApiFp(configuration)
        .devicesControllerUpdateDevice(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
  /**
   *
   * @summary Add a device to an organization
   * @param {string} serial Serial number
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerAddDeviceToOrganization(
    serial: string,
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerAddDeviceToOrganization(
        serial,
        organization_id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Create a new device
   * @param {CreateDeviceDto} body Device data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerCreate(
    body: CreateDeviceDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieve all devices
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerFindAll(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<DeviceTable>>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieve all organizations for a given device
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerFindAllOrganizations(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<Organization>>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerFindAllOrganizations(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieve a device by its ID
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerFindOne(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete a device by its ID and all relations with the organizations that it belongs
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerRemove(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Remove a device from an organization
   * @param {string} device_id Device ID
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerRemoveDeviceFromOrganization(
    device_id: string,
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerRemoveDeviceFromOrganization(
        device_id,
        organization_id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete all devices from an organization
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerRemoveDeviceFromOrganizations(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<DeviceTable>>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerRemoveDeviceFromOrganizations(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update the active status of a device
   * @param {UpdateActiveDeviceDto} body Device active status
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerUpdate(
    body: UpdateActiveDeviceDto,
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update a device by its ID
   * @param {UpdateDeviceDto} body Device data
   * @param {string} id Unique device identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DevicesApi
   */
  public async devicesControllerUpdateDevice(
    body: UpdateDeviceDto,
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<DeviceTable>> {
    return DevicesApiFp(this.configuration)
      .devicesControllerUpdateDevice(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
