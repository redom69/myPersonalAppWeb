/* tslint:disable */
/* eslint-disable */
/**
 * Marsinet
 * The marsinet API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { AddPatientDTO } from '../models';
import { EmailsDTO } from '../models';
import { PatientDto } from '../models';
import { PatientTable } from '../models';
import { PatientView } from '../models';
import { RemovePatientOrgDTO } from '../models';
import { UpdatePatientDto } from '../models';
/**
 * PatientsApi - axios parameter creator
 * @export
 */
export const PatientsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add a patient to an organization
     * @param {AddPatientDTO} body Emails of the legal guardian of the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerAddPatientToOrganization: async (
      body: AddPatientDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patientControllerAddPatientToOrganization.'
        );
      }
      const localVarPath = `/patient/organization/add-patient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new patient
     * @param {PatientDto} body Patient data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerCreate: async (
      body: PatientDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patientControllerCreate.'
        );
      }
      const localVarPath = `/patient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerFindAll: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/patient`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerFindOne: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patientControllerFindOne.'
        );
      }
      const localVarPath = `/patient/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List all the configuration of the patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerGetConfig: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/patient/config`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a patient
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerRemove: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patientControllerRemove.'
        );
      }
      const localVarPath = `/patient/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a patient from an organization
     * @param {RemovePatientOrgDTO} body
     * @param {any} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerRemovePatientFromOrganization: async (
      body: RemovePatientOrgDTO,
      id: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patientControllerRemovePatientFromOrganization.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patientControllerRemovePatientFromOrganization.'
        );
      }
      const localVarPath = `/patient/organization/remove-patient/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sync patients with the organization
     * @param {EmailsDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerSyncPatientsWithOrganization: async (
      body: EmailsDTO,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patientControllerSyncPatientsWithOrganization.'
        );
      }
      const localVarPath = `/patient/organization/sync-patients`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update patient data
     * @param {UpdatePatientDto} body Patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patientControllerUpdate: async (
      body: UpdatePatientDto,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling patientControllerUpdate.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling patientControllerUpdate.'
        );
      }
      const localVarPath = `/patient/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add a patient to an organization
     * @param {AddPatientDTO} body Emails of the legal guardian of the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerAddPatientToOrganization(
      body: AddPatientDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerAddPatientToOrganization(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Create a new patient
     * @param {PatientDto} body Patient data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerCreate(
      body: PatientDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PatientDto>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerCreate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerFindAll(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PatientTable>>
    > {
      const localVarAxiosArgs =
        await PatientsApiAxiosParamCreator(
          configuration
        ).patientControllerFindAll(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PatientView>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerFindOne(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List all the configuration of the patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerGetConfig(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<PatientDto>>>
    > {
      const localVarAxiosArgs =
        await PatientsApiAxiosParamCreator(
          configuration
        ).patientControllerGetConfig(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete a patient
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<PatientDto>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerRemove(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Remove a patient from an organization
     * @param {RemovePatientOrgDTO} body
     * @param {any} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerRemovePatientFromOrganization(
      body: RemovePatientOrgDTO,
      id: any,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerRemovePatientFromOrganization(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Sync patients with the organization
     * @param {EmailsDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerSyncPatientsWithOrganization(
      body: EmailsDTO,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerSyncPatientsWithOrganization(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update patient data
     * @param {UpdatePatientDto} body Patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerUpdate(
      body: UpdatePatientDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<UpdatePatientDto>>
    > {
      const localVarAxiosArgs = await PatientsApiAxiosParamCreator(
        configuration
      ).patientControllerUpdate(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Add a patient to an organization
     * @param {AddPatientDTO} body Emails of the legal guardian of the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerAddPatientToOrganization(
      body: AddPatientDTO,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return PatientsApiFp(configuration)
        .patientControllerAddPatientToOrganization(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new patient
     * @param {PatientDto} body Patient data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerCreate(
      body: PatientDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PatientDto>> {
      return PatientsApiFp(configuration)
        .patientControllerCreate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerFindAll(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PatientTable>> {
      return PatientsApiFp(configuration)
        .patientControllerFindAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerFindOne(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PatientView>> {
      return PatientsApiFp(configuration)
        .patientControllerFindOne(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all the configuration of the patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerGetConfig(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<PatientDto>>> {
      return PatientsApiFp(configuration)
        .patientControllerGetConfig(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a patient
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerRemove(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<PatientDto>> {
      return PatientsApiFp(configuration)
        .patientControllerRemove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a patient from an organization
     * @param {RemovePatientOrgDTO} body
     * @param {any} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerRemovePatientFromOrganization(
      body: RemovePatientOrgDTO,
      id: any,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return PatientsApiFp(configuration)
        .patientControllerRemovePatientFromOrganization(body, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sync patients with the organization
     * @param {EmailsDTO} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerSyncPatientsWithOrganization(
      body: EmailsDTO,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return PatientsApiFp(configuration)
        .patientControllerSyncPatientsWithOrganization(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update patient data
     * @param {UpdatePatientDto} body Patient data
     * @param {string} id Unique patient identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patientControllerUpdate(
      body: UpdatePatientDto,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<UpdatePatientDto>> {
      return PatientsApiFp(configuration)
        .patientControllerUpdate(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
  /**
   *
   * @summary Add a patient to an organization
   * @param {AddPatientDTO} body Emails of the legal guardian of the patient
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerAddPatientToOrganization(
    body: AddPatientDTO,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return PatientsApiFp(this.configuration)
      .patientControllerAddPatientToOrganization(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Create a new patient
   * @param {PatientDto} body Patient data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerCreate(
    body: PatientDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PatientDto>> {
    return PatientsApiFp(this.configuration)
      .patientControllerCreate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary List all patients
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerFindAll(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PatientTable>> {
    return PatientsApiFp(this.configuration)
      .patientControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get patient data
   * @param {string} id Unique patient identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerFindOne(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PatientView>> {
    return PatientsApiFp(this.configuration)
      .patientControllerFindOne(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary List all the configuration of the patients
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerGetConfig(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<PatientDto>>> {
    return PatientsApiFp(this.configuration)
      .patientControllerGetConfig(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Delete a patient
   * @param {string} id Unique patient identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerRemove(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<PatientDto>> {
    return PatientsApiFp(this.configuration)
      .patientControllerRemove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Remove a patient from an organization
   * @param {RemovePatientOrgDTO} body
   * @param {any} id Unique patient identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerRemovePatientFromOrganization(
    body: RemovePatientOrgDTO,
    id: any,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return PatientsApiFp(this.configuration)
      .patientControllerRemovePatientFromOrganization(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Sync patients with the organization
   * @param {EmailsDTO} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerSyncPatientsWithOrganization(
    body: EmailsDTO,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return PatientsApiFp(this.configuration)
      .patientControllerSyncPatientsWithOrganization(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update patient data
   * @param {UpdatePatientDto} body Patient data
   * @param {string} id Unique patient identifier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PatientsApi
   */
  public async patientControllerUpdate(
    body: UpdatePatientDto,
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<UpdatePatientDto>> {
    return PatientsApiFp(this.configuration)
      .patientControllerUpdate(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
