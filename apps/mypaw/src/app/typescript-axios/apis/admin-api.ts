/* tslint:disable */
/* eslint-disable */
/**
 *
 * The  API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { CreateOrganization } from '../models';
import { CreateUser } from '../models';
import { DevicesOfOrganization } from '../models';
import { Organization } from '../models';
import { UpdateOrganizationDto } from '../models';
import { UsersView } from '../models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Retrieves all organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerAllOrganizations: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new organization
     * @param {CreateOrganization} body Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateOrganization: async (
      body: CreateOrganization,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling adminControllerCreateOrganization.'
        );
      }
      const localVarPath = `/admin/organizations/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Creates a new user
     * @param {CreateUser} body User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateUser: async (
      body: CreateUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling adminControllerCreateUser.'
        );
      }
      const localVarPath = `/admin/users/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteOrganization: async (
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling adminControllerDeleteOrganization.'
        );
      }
      const localVarPath =
        `/admin/organization/{organization_id}/delete`.replace(
          `{${'organization_id'}}`,
          encodeURIComponent(String(organization_id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteUser: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling adminControllerDeleteUser.'
        );
      }
      const localVarPath = `/admin/users/delete/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieves all devices of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerFindAllDevicesOfOrganization: async (
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling adminControllerFindAllDevicesOfOrganization.'
        );
      }
      const localVarPath =
        `/admin/organization/{organization_id}/devices`.replace(
          `{${'organization_id'}}`,
          encodeURIComponent(String(organization_id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieves a single organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerFindOneOrganization: async (
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling adminControllerFindOneOrganization.'
        );
      }
      const localVarPath = `/admin/organization/{organization_id}`.replace(
        `{${'organization_id'}}`,
        encodeURIComponent(String(organization_id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieves a single user
     * @param {string} user_id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerFindOneUser: async (
      user_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'user_id' is not null or undefined
      if (user_id === null || user_id === undefined) {
        throw new RequiredError(
          'user_id',
          'Required parameter user_id was null or undefined when calling adminControllerFindOneUser.'
        );
      }
      const localVarPath = `/admin/users/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(user_id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Toggles the premium status of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerOrganizationTogglePremium: async (
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling adminControllerOrganizationTogglePremium.'
        );
      }
      const localVarPath =
        `/admin/organization/{organization_id}/toggle-premium`.replace(
          `{${'organization_id'}}`,
          encodeURIComponent(String(organization_id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates an organization
     * @param {UpdateOrganizationDto} body Organization data
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateOrganization: async (
      body: UpdateOrganizationDto,
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling adminControllerUpdateOrganization.'
        );
      }
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling adminControllerUpdateOrganization.'
        );
      }
      const localVarPath =
        `/admin/organization/{organization_id}/update`.replace(
          `{${'organization_id'}}`,
          encodeURIComponent(String(organization_id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Updates a user
     * @param {UsersView} body User data
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateUserData: async (
      body: UsersView,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling adminControllerUpdateUserData.'
        );
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling adminControllerUpdateUserData.'
        );
      }
      const localVarPath = `/admin/users/update/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieves all organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerAllOrganizations(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<Organization>>>
    > {
      const localVarAxiosArgs =
        await AdminApiAxiosParamCreator(
          configuration
        ).adminControllerAllOrganizations(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Creates a new organization
     * @param {CreateOrganization} body Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerCreateOrganization(
      body: CreateOrganization,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<CreateOrganization>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerCreateOrganization(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Creates a new user
     * @param {CreateUser} body User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerCreateUser(
      body: CreateUser,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerCreateUser(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Deletes an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerDeleteOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerDeleteOrganization(organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Deletes a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerDeleteUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerDeleteUser(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieves all devices of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindAllDevicesOfOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<DevicesOfOrganization>>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerFindAllDevicesOfOrganization(organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieves a single organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindOneOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Organization>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerFindOneOrganization(organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Retrieves a single user
     * @param {string} user_id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindOneUser(
      user_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<UsersView>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerFindOneUser(user_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Toggles the premium status of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerOrganizationTogglePremium(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Organization>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerOrganizationTogglePremium(organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Updates an organization
     * @param {UpdateOrganizationDto} body Organization data
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerUpdateOrganization(
      body: UpdateOrganizationDto,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Organization>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerUpdateOrganization(body, organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Updates a user
     * @param {UsersView} body User data
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerUpdateUserData(
      body: UsersView,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<boolean>>
    > {
      const localVarAxiosArgs = await AdminApiAxiosParamCreator(
        configuration
      ).adminControllerUpdateUserData(body, id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Retrieves all organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerAllOrganizations(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<Organization>>> {
      return AdminApiFp(configuration)
        .adminControllerAllOrganizations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Creates a new organization
     * @param {CreateOrganization} body Organization data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerCreateOrganization(
      body: CreateOrganization,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<CreateOrganization>> {
      return AdminApiFp(configuration)
        .adminControllerCreateOrganization(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Creates a new user
     * @param {CreateUser} body User data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerCreateUser(
      body: CreateUser,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return AdminApiFp(configuration)
        .adminControllerCreateUser(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deletes an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerDeleteOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return AdminApiFp(configuration)
        .adminControllerDeleteOrganization(organization_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deletes a user
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerDeleteUser(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return AdminApiFp(configuration)
        .adminControllerDeleteUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieves all devices of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindAllDevicesOfOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<DevicesOfOrganization>>> {
      return AdminApiFp(configuration)
        .adminControllerFindAllDevicesOfOrganization(organization_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieves a single organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindOneOrganization(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Organization>> {
      return AdminApiFp(configuration)
        .adminControllerFindOneOrganization(organization_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieves a single user
     * @param {string} user_id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerFindOneUser(
      user_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<UsersView>> {
      return AdminApiFp(configuration)
        .adminControllerFindOneUser(user_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Toggles the premium status of an organization
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerOrganizationTogglePremium(
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Organization>> {
      return AdminApiFp(configuration)
        .adminControllerOrganizationTogglePremium(organization_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Updates an organization
     * @param {UpdateOrganizationDto} body Organization data
     * @param {string} organization_id Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerUpdateOrganization(
      body: UpdateOrganizationDto,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Organization>> {
      return AdminApiFp(configuration)
        .adminControllerUpdateOrganization(body, organization_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Updates a user
     * @param {UsersView} body User data
     * @param {string} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminControllerUpdateUserData(
      body: UsersView,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<boolean>> {
      return AdminApiFp(configuration)
        .adminControllerUpdateUserData(body, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
  /**
   *
   * @summary Retrieves all organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerAllOrganizations(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<Organization>>> {
    return AdminApiFp(this.configuration)
      .adminControllerAllOrganizations(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Creates a new organization
   * @param {CreateOrganization} body Organization data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerCreateOrganization(
    body: CreateOrganization,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<CreateOrganization>> {
    return AdminApiFp(this.configuration)
      .adminControllerCreateOrganization(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Creates a new user
   * @param {CreateUser} body User data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerCreateUser(
    body: CreateUser,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return AdminApiFp(this.configuration)
      .adminControllerCreateUser(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Deletes an organization
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerDeleteOrganization(
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return AdminApiFp(this.configuration)
      .adminControllerDeleteOrganization(organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Deletes a user
   * @param {string} id User ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerDeleteUser(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return AdminApiFp(this.configuration)
      .adminControllerDeleteUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieves all devices of an organization
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerFindAllDevicesOfOrganization(
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<DevicesOfOrganization>>> {
    return AdminApiFp(this.configuration)
      .adminControllerFindAllDevicesOfOrganization(organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieves a single organization
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerFindOneOrganization(
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Organization>> {
    return AdminApiFp(this.configuration)
      .adminControllerFindOneOrganization(organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Retrieves a single user
   * @param {string} user_id User ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerFindOneUser(
    user_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<UsersView>> {
    return AdminApiFp(this.configuration)
      .adminControllerFindOneUser(user_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Toggles the premium status of an organization
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerOrganizationTogglePremium(
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Organization>> {
    return AdminApiFp(this.configuration)
      .adminControllerOrganizationTogglePremium(organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Updates an organization
   * @param {UpdateOrganizationDto} body Organization data
   * @param {string} organization_id Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerUpdateOrganization(
    body: UpdateOrganizationDto,
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Organization>> {
    return AdminApiFp(this.configuration)
      .adminControllerUpdateOrganization(body, organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Updates a user
   * @param {UsersView} body User data
   * @param {string} id User ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminApi
   */
  public async adminControllerUpdateUserData(
    body: UsersView,
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<boolean>> {
    return AdminApiFp(this.configuration)
      .adminControllerUpdateUserData(body, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
