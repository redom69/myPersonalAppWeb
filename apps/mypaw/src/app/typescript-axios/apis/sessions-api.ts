/* tslint:disable */
/* eslint-disable */
/**
 * Marsinet
 * The marsinet API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { Session } from '../models';
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export const SessionsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get all sessions of a device
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionControllerFindAllSessionsOfDevice: async (
      device_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'device_id' is not null or undefined
      if (device_id === null || device_id === undefined) {
        throw new RequiredError(
          'device_id',
          'Required parameter device_id was null or undefined when calling sessionControllerFindAllSessionsOfDevice.'
        );
      }
      const localVarPath = `/session/of-device/{device_id}`.replace(
        `{${'device_id'}}`,
        encodeURIComponent(String(device_id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all sessions of a patient
     * @param {string} patient_id Patient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionControllerFindAllSessionsOfPatient: async (
      patient_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patient_id' is not null or undefined
      if (patient_id === null || patient_id === undefined) {
        throw new RequiredError(
          'patient_id',
          'Required parameter patient_id was null or undefined when calling sessionControllerFindAllSessionsOfPatient.'
        );
      }
      const localVarPath = `/session/of-patient/{patient_id}`.replace(
        `{${'patient_id'}}`,
        encodeURIComponent(String(patient_id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get all sessions of a device
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sessionControllerFindAllSessionsOfDevice(
      device_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Session>>
    > {
      const localVarAxiosArgs = await SessionsApiAxiosParamCreator(
        configuration
      ).sessionControllerFindAllSessionsOfDevice(device_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get all sessions of a patient
     * @param {string} patient_id Patient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sessionControllerFindAllSessionsOfPatient(
      patient_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Session>>
    > {
      const localVarAxiosArgs = await SessionsApiAxiosParamCreator(
        configuration
      ).sessionControllerFindAllSessionsOfPatient(patient_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Get all sessions of a device
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sessionControllerFindAllSessionsOfDevice(
      device_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Session>> {
      return SessionsApiFp(configuration)
        .sessionControllerFindAllSessionsOfDevice(device_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all sessions of a patient
     * @param {string} patient_id Patient ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sessionControllerFindAllSessionsOfPatient(
      patient_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Session>> {
      return SessionsApiFp(configuration)
        .sessionControllerFindAllSessionsOfPatient(patient_id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
  /**
   *
   * @summary Get all sessions of a device
   * @param {string} device_id Device ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApi
   */
  public async sessionControllerFindAllSessionsOfDevice(
    device_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Session>> {
    return SessionsApiFp(this.configuration)
      .sessionControllerFindAllSessionsOfDevice(device_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get all sessions of a patient
   * @param {string} patient_id Patient ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApi
   */
  public async sessionControllerFindAllSessionsOfPatient(
    patient_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Session>> {
    return SessionsApiFp(this.configuration)
      .sessionControllerFindAllSessionsOfPatient(patient_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
