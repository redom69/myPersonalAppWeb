/* tslint:disable */
/* eslint-disable */
/**
 *
 * The  API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { LoginDto } from '../models';
import { LoginResponseDto } from '../models';
import { OrganizationDto } from '../models';
import { RegisterDto } from '../models';
import { RegisterResponseDto } from '../models';
import { RequestResetPasswordDto } from '../models';
import { RequestResetPasswordResponseDto } from '../models';
import { ResetPasswordDto } from '../models';
import { ResetPasswordResponseDto } from '../models';
/**
 * UserNotAuthenticatedApi - axios parameter creator
 * @export
 */
export const UserNotAuthenticatedApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Email verification
     * @param {string} email Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerEmailVerification: async (
      email: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      if (email === null || email === undefined) {
        throw new RequiredError(
          'email',
          'Required parameter email was null or undefined when calling appControllerEmailVerification.'
        );
      }
      const localVarPath = `/email-verification/{email}`.replace(
        `{${'email'}}`,
        encodeURIComponent(String(email))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Check if server is up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetData: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get organization name by code
     * @param {string} id Organization code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetOrganizationNameByCode: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          'id',
          'Required parameter id was null or undefined when calling appControllerGetOrganizationNameByCode.'
        );
      }
      const localVarPath = `/organization-name/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetOrganizations: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login
     * @param {LoginDto} body Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerLogin: async (
      body: LoginDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling appControllerLogin.'
        );
      }
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Refresh token
     * @param {string} body Refresh token data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerRefreshToken: async (
      body: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling appControllerRefreshToken.'
        );
      }
      const localVarPath = `/refresh-token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Register
     * @param {RegisterDto} body Register data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerRegister: async (
      body: RegisterDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling appControllerRegister.'
        );
      }
      const localVarPath = `/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Request reset password
     * @param {RequestResetPasswordDto} body Request reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerRequestResetPassword: async (
      body: RequestResetPasswordDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling appControllerRequestResetPassword.'
        );
      }
      const localVarPath = `/request-reset-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordDto} body Reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerResetPassword: async (
      body: ResetPasswordDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling appControllerResetPassword.'
        );
      }
      const localVarPath = `/reset-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserNotAuthenticatedApi - functional programming interface
 * @export
 */
export const UserNotAuthenticatedApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Email verification
     * @param {string} email Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerEmailVerification(
      email: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerEmailVerification(email, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Check if server is up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetData(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>
    > {
      const localVarAxiosArgs =
        await UserNotAuthenticatedApiAxiosParamCreator(
          configuration
        ).appControllerGetData(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get organization name by code
     * @param {string} id Organization code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetOrganizationNameByCode(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<string>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerGetOrganizationNameByCode(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetOrganizations(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<Array<OrganizationDto>>>
    > {
      const localVarAxiosArgs =
        await UserNotAuthenticatedApiAxiosParamCreator(
          configuration
        ).appControllerGetOrganizations(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Login
     * @param {LoginDto} body Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerLogin(
      body: LoginDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<LoginResponseDto>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerLogin(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Refresh token
     * @param {string} body Refresh token data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRefreshToken(
      body: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<string>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerRefreshToken(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Register
     * @param {RegisterDto} body Register data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRegister(
      body: RegisterDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<RegisterResponseDto>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerRegister(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Request reset password
     * @param {RequestResetPasswordDto} body Request reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRequestResetPassword(
      body: RequestResetPasswordDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<RequestResetPasswordResponseDto>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerRequestResetPassword(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordDto} body Reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerResetPassword(
      body: ResetPasswordDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<ResetPasswordResponseDto>>
    > {
      const localVarAxiosArgs = await UserNotAuthenticatedApiAxiosParamCreator(
        configuration
      ).appControllerResetPassword(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * UserNotAuthenticatedApi - factory interface
 * @export
 */
export const UserNotAuthenticatedApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Email verification
     * @param {string} email Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerEmailVerification(
      email: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerEmailVerification(email, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Check if server is up
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetData(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<void>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerGetData(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get organization name by code
     * @param {string} id Organization code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetOrganizationNameByCode(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<string>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerGetOrganizationNameByCode(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetOrganizations(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<Array<OrganizationDto>>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerGetOrganizations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login
     * @param {LoginDto} body Login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerLogin(
      body: LoginDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<LoginResponseDto>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerLogin(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Refresh token
     * @param {string} body Refresh token data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRefreshToken(
      body: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<string>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerRefreshToken(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Register
     * @param {RegisterDto} body Register data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRegister(
      body: RegisterDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<RegisterResponseDto>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerRegister(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Request reset password
     * @param {RequestResetPasswordDto} body Request reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerRequestResetPassword(
      body: RequestResetPasswordDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<RequestResetPasswordResponseDto>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerRequestResetPassword(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Reset password
     * @param {ResetPasswordDto} body Reset password data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerResetPassword(
      body: ResetPasswordDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<ResetPasswordResponseDto>> {
      return UserNotAuthenticatedApiFp(configuration)
        .appControllerResetPassword(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserNotAuthenticatedApi - object-oriented interface
 * @export
 * @class UserNotAuthenticatedApi
 * @extends {BaseAPI}
 */
export class UserNotAuthenticatedApi extends BaseAPI {
  /**
   *
   * @summary Email verification
   * @param {string} email Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerEmailVerification(
    email: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerEmailVerification(email, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Check if server is up
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerGetData(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<void>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerGetData(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get organization name by code
   * @param {string} id Organization code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerGetOrganizationNameByCode(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<string>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerGetOrganizationNameByCode(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerGetOrganizations(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<Array<OrganizationDto>>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerGetOrganizations(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Login
   * @param {LoginDto} body Login data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerLogin(
    body: LoginDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<LoginResponseDto>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerLogin(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Refresh token
   * @param {string} body Refresh token data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerRefreshToken(
    body: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<string>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerRefreshToken(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Register
   * @param {RegisterDto} body Register data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerRegister(
    body: RegisterDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<RegisterResponseDto>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerRegister(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Request reset password
   * @param {RequestResetPasswordDto} body Request reset password data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerRequestResetPassword(
    body: RequestResetPasswordDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<RequestResetPasswordResponseDto>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerRequestResetPassword(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Reset password
   * @param {ResetPasswordDto} body Reset password data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserNotAuthenticatedApi
   */
  public async appControllerResetPassword(
    body: ResetPasswordDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<ResetPasswordResponseDto>> {
    return UserNotAuthenticatedApiFp(this.configuration)
      .appControllerResetPassword(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
