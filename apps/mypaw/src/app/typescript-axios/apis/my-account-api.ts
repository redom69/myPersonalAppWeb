/* tslint:disable */
/* eslint-disable */
/**
 *
 * The  API description
 *
 * OpenAPI spec version: 2.1.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
import { GetMenuInfo } from '../models';
import { MyAccount } from '../models';
import { MyDevices } from '../models';
import { OrganizationUpdateDto } from '../models';
import { UserUpdateDto } from '../models';
/**
 * MyAccountApi - axios parameter creator
 * @export
 */
export const MyAccountApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add device to my account
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerAddDeviceToMyAccount: async (
      device_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'device_id' is not null or undefined
      if (device_id === null || device_id === undefined) {
        throw new RequiredError(
          'device_id',
          'Required parameter device_id was null or undefined when calling myAccountControllerAddDeviceToMyAccount.'
        );
      }
      const localVarPath = `/my-account/add-device/{device_id}`.replace(
        `{${'device_id'}}`,
        encodeURIComponent(String(device_id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerGetData: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/my-account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get menu of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerGetMenu: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/my-account/menu`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get devices access of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerGetMyDevices: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/my-account/my-devices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user account data
     * @param {UserUpdateDto} body User data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerUpdate: async (
      body: UserUpdateDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling myAccountControllerUpdate.'
        );
      }
      const localVarPath = `/my-account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update organization
     * @param {OrganizationUpdateDto} body
     * @param {string} organization_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myAccountControllerUpdateOrganization: async (
      body: OrganizationUpdateDto,
      organization_id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling myAccountControllerUpdateOrganization.'
        );
      }
      // verify required parameter 'organization_id' is not null or undefined
      if (organization_id === null || organization_id === undefined) {
        throw new RequiredError(
          'organization_id',
          'Required parameter organization_id was null or undefined when calling myAccountControllerUpdateOrganization.'
        );
      }
      const localVarPath =
        `/my-account/update-organization/{organization_id}`.replace(
          `{${'organization_id'}}`,
          encodeURIComponent(String(organization_id))
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken =
          typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url:
          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MyAccountApi - functional programming interface
 * @export
 */
export const MyAccountApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add device to my account
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerAddDeviceToMyAccount(
      device_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<MyDevices>>
    > {
      const localVarAxiosArgs = await MyAccountApiAxiosParamCreator(
        configuration
      ).myAccountControllerAddDeviceToMyAccount(device_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get user account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetData(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<MyAccount>>
    > {
      const localVarAxiosArgs =
        await MyAccountApiAxiosParamCreator(
          configuration
        ).myAccountControllerGetData(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get menu of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetMenu(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<GetMenuInfo>>
    > {
      const localVarAxiosArgs =
        await MyAccountApiAxiosParamCreator(
          configuration
        ).myAccountControllerGetMenu(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get devices access of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetMyDevices(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<MyDevices>>
    > {
      const localVarAxiosArgs =
        await MyAccountApiAxiosParamCreator(
          configuration
        ).myAccountControllerGetMyDevices(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update user account data
     * @param {UserUpdateDto} body User data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerUpdate(
      body: UserUpdateDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<MyAccount>>
    > {
      const localVarAxiosArgs = await MyAccountApiAxiosParamCreator(
        configuration
      ).myAccountControllerUpdate(body, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update organization
     * @param {OrganizationUpdateDto} body
     * @param {string} organization_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerUpdateOrganization(
      body: OrganizationUpdateDto,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<MyAccount>>
    > {
      const localVarAxiosArgs = await MyAccountApiAxiosParamCreator(
        configuration
      ).myAccountControllerUpdateOrganization(body, organization_id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * MyAccountApi - factory interface
 * @export
 */
export const MyAccountApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary Add device to my account
     * @param {string} device_id Device ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerAddDeviceToMyAccount(
      device_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<MyDevices>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerAddDeviceToMyAccount(device_id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user account data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetData(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<MyAccount>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerGetData(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get menu of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetMenu(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<GetMenuInfo>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerGetMenu(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get devices access of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerGetMyDevices(
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<MyDevices>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerGetMyDevices(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user account data
     * @param {UserUpdateDto} body User data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerUpdate(
      body: UserUpdateDto,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<MyAccount>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerUpdate(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update organization
     * @param {OrganizationUpdateDto} body
     * @param {string} organization_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async myAccountControllerUpdateOrganization(
      body: OrganizationUpdateDto,
      organization_id: string,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<MyAccount>> {
      return MyAccountApiFp(configuration)
        .myAccountControllerUpdateOrganization(body, organization_id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MyAccountApi - object-oriented interface
 * @export
 * @class MyAccountApi
 * @extends {BaseAPI}
 */
export class MyAccountApi extends BaseAPI {
  /**
   *
   * @summary Add device to my account
   * @param {string} device_id Device ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerAddDeviceToMyAccount(
    device_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<MyDevices>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerAddDeviceToMyAccount(device_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get user account data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerGetData(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<MyAccount>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerGetData(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get menu of user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerGetMenu(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<GetMenuInfo>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerGetMenu(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Get devices access of user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerGetMyDevices(
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<MyDevices>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerGetMyDevices(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update user account data
   * @param {UserUpdateDto} body User data to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerUpdate(
    body: UserUpdateDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<MyAccount>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerUpdate(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   *
   * @summary Update organization
   * @param {OrganizationUpdateDto} body
   * @param {string} organization_id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MyAccountApi
   */
  public async myAccountControllerUpdateOrganization(
    body: OrganizationUpdateDto,
    organization_id: string,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<MyAccount>> {
    return MyAccountApiFp(this.configuration)
      .myAccountControllerUpdateOrganization(body, organization_id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
